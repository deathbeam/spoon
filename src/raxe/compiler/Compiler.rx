import raxe.tools.StringHandle
#if !js
  import sys.io.File
#end
#############################################################################
# The most important Raxe class, which compiles Raxe source to Haxe source
#############################################################################
class self
  def new() => null

  private def name : String = ""
  private def currentType : String = ""
  private def currentExpression : String = ""
  private def hasVisibility : Bool = false
  private def opened : Int = -1
  private def currentOpened : Int = -1

  #############################################################################
  # Array of tokens used for StringHandle to correctly parse Raxe files
  #############################################################################
  def tokens = [
    # Line break
    "\n", ";",

    # Whitespace skip
    "#", "@", "\"",

    # Types
    "::", "class", "enum", "abstract", "interface", "module",

    # Modifiers
    "public", "private",

    # Special keywords
    "import", "def", "self", "new", "end", "do", "typedef", "try", "catch", "empty",

    # Brackets
    "{", "}", "(", ")", "[", "]", "=>",

    # Operators (- is also used for comments, < is also used for inheritance)
    ":", "?", "=", "+", "-", "*", ".", "/", "," , "|", "&",  "^", "%", "<", ">", "~",

    # Expressions
    "elsif", "if", "else", "while", "for", "switch", "when",
  ]

  #############################################################################
  # Compile Raxe file and returns Haxe result
  # @param directory root project directory, needed for correct package names
  # @param file file path to compile
  # @return Raxe file compiled to it's Haxe equivalent
  #############################################################################

  #if !js
    def compile(directory : String, file : String) : String
      def currentPackage = file
        .replace(directory, "")
        .replace("\\", "/")

      name = currentPackage
        .substr(currentPackage.lastIndexOf("/") + 1)
        .replace(".rx", "")

      currentPackage = currentPackage
        .replace(currentPackage.substr(currentPackage.lastIndexOf("/")), "")
        .replace("/", ".")

      if(currentPackage.charAt(0) == ".")
        currentPackage = currentPackage.substr(1)
      end

      return run(new StringHandle(File.getContent(file), tokens)
        .insert("package " + currentPackage + ";using Lambda;using StringTools;")
        .increment()
      ).content
    end
  #end
  #############################################################################
  # Process content of StringHandle and return it modified
  # @param script Determine if automatically insert package and class names
  # @param handle Handle with initial content and position
  # @return modified string handle with adjusted position and content
  #############################################################################
  public def run(handle : StringHandle, script : Bool = false, endPosition : Int = -1) : StringHandle
    while(handle.nextToken())
      # Skip compiler defines and annotations
      if (handle.is("@"))
        handle.next("\n")
        handle.increment()
      # Step over things in strings (" ") and process multiline strings
      elsif(handle.is("\""))
        consumeStrings(handle)
      # Correct access
      elsif(handle.safeis("public") || handle.safeis("private"))
        hasVisibility = true
        handle.increment()
      # Change require to classic imports
      elsif(handle.safeis("import"))
        handle.next("\n")
        handle.insert(";")
        handle.increment()
      # Empty operator (null)
      elsif(handle.safeis("empty"))
        handle.remove()
        handle.insert("null")
        handle.increment()
      # Replace self with current module name
      elsif(handle.safeis("self"))
        handle.remove()
        handle.insert(name)
        handle.increment()
      # Structures and arrays
      elsif(handle.is("{") || handle.is("["))
        opened = opened + 1
        handle.increment()
      elsif(handle.is("}") || handle.is("]"))
        opened = opened - 1

        if(opened == -1)
          currentType = ""
        end

        handle.increment()
      # Change end to classic bracket end
      elsif(handle.safeis("end"))
        handle.remove()
        handle.insert("}")
        handle.increment()
        opened = opened - 1

        if(currentOpened == opened)
          currentOpened = -1
          currentExpression = ""
        end
      # Insert begin bracket after switch
      elsif(handle.safeis("switch"))
        currentExpression = handle.current
        currentOpened = opened
        handle.increment()
        handle.nextToken()
        consumeBrackets(handle, script, "(", ")")
        handle.next("\n")
        handle.insert("{")
        handle.increment()
        opened = opened + 1
      # Replaced when with Haxe "case"
      elsif(handle.safeis("when"))
        handle.remove()
        handle.insert("case")
        handle.increment()
        handle.nextToken()
        consumeBrackets(handle, script, "(", ")")
        handle.next("\n")
        handle.insert(":")
        handle.increment()
      # Insert begin bracket after try
      elsif(handle.safeis("try"))
        handle.increment()
        handle.insert("{")
        handle.increment()
        opened = opened + 1
      # Insert brackets around catch
      elsif(handle.safeis("catch"))
        handle.insert("}")
        handle.increment()
        handle.increment("catch")
        handle.nextToken()
        consumeBrackets(handle, script, "(", ")")
        handle.next("\n")
        handle.insert("{")
        handle.increment()
      # Insert begin bracket after if and while
      elsif(handle.safeis("if"))
        handle.increment()
        handle.nextToken()
        consumeBrackets(handle, script, "(", ")")
        handle.next("\n")
        handle.insert("{")
        handle.increment()
        opened = opened + 1
      # Change elseif to else if and insert begin and end brackets around it
      elsif(handle.safeis("elsif"))
        handle.remove()
        handle.insert("}else if")
        handle.increment()
        handle.nextToken()
        consumeBrackets(handle, script, "(", ")")
        handle.next("\n")
        handle.insert("{")
        handle.increment()
      # Insert begin brackets after loops declaration
      elsif(handle.safeis("while") || handle.safeis("for"))
        handle.increment()
        handle.nextToken()
        consumeBrackets(handle, script, "(", ")")
        handle.next("\n")
        handle.insert("{")
        opened = opened + 1
        handle.increment()
      # Inser begin and end brackets around else but do not try to
      # process curlys because there will not be any
      elsif(handle.safeis("else"))
        if(currentExpression == "switch")
          handle.remove()
          handle.insert("default:")
        else
          handle.insert("}")
          handle.increment()
          handle.increment("else")
          handle.insert("{")
        end

        handle.increment()
      # Defines to variables and functions
      elsif(handle.safeis("def"))
        handle.remove("def")

        if(opened == 0 && !script)
          if(!hasVisibility)
            handle.insert("public ")
            handle.increment()
          end

          if(currentType == "module")
            handle.insert("static ")
            handle.increment()
          end
        end

        hasVisibility = false

        def position = handle.position
        safeNextToken(handle)

        if(handle.safeis("self"))
          handle.remove("self.")
          handle.position = position
          handle.insert("static ")
          handle.increment()
          position = handle.position
          safeNextToken(handle)
        end

        def implicit = true

        if(handle.safeis("new"))
          implicit = false
          handle.increment()
          handle.nextToken()
        end

        if(handle.is("("))
          handle.position = position
          handle.insert("function")
          consumeBrackets(handle, script, "(", ")")

          if(currentType != "interface")
            while(safeNextToken(handle))
              if(handle.is("=>"))
                handle.remove()

                if(implicit)
                  handle.insert("return")
                end

                break
              elsif(handle.isOne(["\n", "#"]))
                if(implicit)
                  handle.insert(" return{")
                else
                  handle.insert("{")
                end
                handle.increment()
                opened = opened + 1
                break
              else
                handle.increment()
              end
            end
          else
            handle.insert(";")
            handle.increment()
          end
        else
          handle.position = position
          handle.insert("var")
          handle.increment()
        end
      # Closures and blocks
      elsif(handle.safeis("do"))
        def position = handle.position
        handle.increment()
        handle.nextToken()
        handle.position = position

        if(handle.is("("))
          handle.remove("do")
          handle.insert("function")
          handle.increment()
          consumeBrackets(handle, script, "(", ")")

          while(safeNextToken(handle))
            if(handle.is("=>"))
              handle.remove()
              handle.insert("return")
              break
            elsif(handle.isOne(["\n", "#"]))
              handle.insert(" return{")
              opened = opened + 1
              break
            else
              handle.increment()
            end
          end
        else
          handle.remove("do")
          handle.insert("{")
          opened = opened + 1
        end

        handle.increment()
      # [abstract] class/interface/enum
      elsif (handle.safeis("class") || handle.safeis("interface") || handle.safeis("enum") || handle.safeis("module"))
        currentType = handle.current

        if(currentType == "module")
          handle.remove()
          handle.insert("class")
        end

        handle.increment()

        while(handle.nextToken())
          if(handle.is("self"))
            handle.remove()
            handle.insert(name)
          elsif(handle.is("<"))
            handle.remove()
            handle.insert("extends")
          elsif(handle.is("::"))
            handle.remove()
            handle.insert("implements")
          elsif(handle.is("\n"))
            handle.insert("{")
            break
          end

          handle.increment()
        end
      # Process comments and newlines. Also, insert semicolons when needed
      elsif(handle.is("\n") || handle.is("#"))
        def pos = handle.position
        def insert = true
        def isComment = handle.is("#")

        handle.prevTokenLine()

        if(handle.isOne(["=", ";", "+", "-", "*", ".", "/", "," , "|", "&", "{", "(", "[", "^", "%", "~", "\n", "}", "?", ":"]) && onlyWhitespace(handle.content, handle.position + 1, pos))
          if(handle.is("-") || handle.is("+"))
            if(handle.content.charAt(handle.position - 1) != handle.current)
              insert = false
            end
          else
            insert = false
          end
        end

        handle.position = pos

        if(!isComment)
          handle.increment("\n")
          handle.nextToken()

          if(handle.isOne(["?", ":", "=", "+", "-", "*", ".", "/", "," , "|", "&", ")", "]", "^", "%", "~"]) && onlyWhitespace(handle.content, pos + 1, handle.position - 1))
            insert = false
          end

          handle.prev("\n")
        end

        if(insert && !handle.atStart())
          handle.insert(";")
          handle.increment()
        end

        if(isComment)
          consumeComments(handle)
        else
          handle.increment()
        end
      # Skip this token
      else
        handle.increment()
      end

      if(endPosition > -1 && handle.position >= endPosition)
        break
      end
    end

    return handle
  end

  private def safeNextToken(handle : StringHandle) : Bool
    handle.nextToken()

    if(safeCheck(handle, "def") && safeCheck(handle, "if") && safeCheck(handle, "elsif") && safeCheck(handle, "end")  &&
        safeCheck(handle, "self")  && safeCheck(handle, "while") && safeCheck(handle, "for") && safeCheck(handle, "import") &&
        safeCheck(handle, "do") && safeCheck(handle, "else") && safeCheck(handle, "try") && safeCheck(handle, "catch") &&
        safeCheck(handle, "private") && safeCheck(handle, "public") && safeCheck(handle, "empty") && safeCheck(handle, "switch") &&
        safeCheck(handle, "when"))
      return true
    else
      handle.increment()
      return safeNextToken(handle)
    end
  end

  private def safeCheck(handle : StringHandle, content : String) : Bool
    if(handle.is(content))
      return handle.safeis(content)
    end

    return true
  end

  private def consumeBrackets(handle : StringHandle, script : Bool, startSymbol : String, endSymbol : String)
    def count = 0
    def startPosition = handle.position

    while(handle.nextToken())
      if(handle.is("\""))
        consumeStrings(handle)
      elsif(handle.is(startSymbol))
        count = count + 1
        handle.increment()
      elsif(handle.is(endSymbol))
        count = count - 1
        handle.increment()
      else
        handle.increment()
      end

      if(count == 0)
        def endPosition = handle.position - endSymbol.length

        if(startPosition < endPosition)
          handle.position = startPosition
          handle = run(handle, script, endPosition)
          handle.position = endPosition
        end

        break
      end
    end
  end

  private def consumeComments(handle : StringHandle)
    def comment = ""
    def position = handle.position

    while(handle.nextTokenLine())
      if(handle.is("#"))
        comment += "#"
        handle.increment()
      else
        handle.increment()
        break
      end
    end

    handle.position = position
    handle.current = "#"

    if(comment.length > 1)
      handle.remove(comment)
      handle.insert("/** ")
      handle.increment()

      while(handle.nextToken())
        if(handle.at(comment))
          handle.remove(comment)
          handle.insert(" **/")
          handle.increment()
          break
        elsif(handle.is("#"))
          position = handle.position
          handle.prevToken()

          if(handle.is("\n") && onlyWhitespace(handle.content, position + 1, handle.position - 1))
            handle.position = position
            handle.remove("#")
            handle.insert("*")
          else
            handle.position = position
          end

          handle.increment()
        else
          handle.increment()
        end
      end
    else
      if(handle.at("#elsif"))
        handle.remove("#elsif")
        handle.insert("#elseif")
      elsif(!handle.at("#if") && !handle.at("#else") && !handle.at("#end"))
        handle.remove(comment)
        handle.insert("//")
      end

      handle.next("\n")
      handle.increment()
    end

    return handle
  end

  private def consumeStrings(handle : StringHandle)
    if(handle.at("\"\"\""))
      handle.remove("\"\"\"")
      handle.insert("\"")
    end

    handle.increment()

    while(handle.nextToken())
      if(handle.is("#"))
        if(handle.content.charAt(handle.position + 1) == "{")
          handle.remove()
          handle.insert("$")
        end

        handle.increment()
      else
        if(handle.is("\"") &&
            (handle.content.charAt(handle.position -1) != "\\" ||
            (handle.content.charAt(handle.position -1) == "\\" &&
            handle.content.charAt(handle.position -2) == "\\")))
          break
        end

        handle.increment()
      end
    end

    if(handle.at("\"\"\""))
      handle.remove("\"\"\"")
      handle.insert("\"")
    end

    handle.increment()
  end

  private def onlyWhitespace(content : String, from : Int, to : Int)
    def sub = content.substr(from, to - from)
    def regex = new EReg("^\\s*$", "")
    return regex.match(sub)
  end
end
