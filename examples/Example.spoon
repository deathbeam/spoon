# Pythonic module system
from Sys import print

# Macros and generic types
@:generic
class MyValue<T>
  function new(value as T)
    this.value = value
  end
end

# Interfaces with default implementation
interface Greeter
  function greet(name as MyValue<String>) as Void
    print "Hello #name"
  end
end

# Classes and OOP
class Person
  include Greeter

  function new(name)
    this.name = name
  end

  # Cool naming with support for - as delimiter
  function greet-self
    greet name
  end
end

# Top-level expressions
name = MyValue<String>("Alice")

# Creating of objects
alice = Person(name)

# Dynamic methods, closures
alice.greet = do(name)
  print "#name is awesome"
end

# Calling of methods
# We will use ! operator, what is replacement for ()
alice.greet-self!

# Above will output "Alice is awesome" to console

# vim: set ft=coffee:
