import sys.FileSystem
import raxe.tools.Error
import raxe.tools.FolderReader
import raxe.transpiler.Transpiler

class self
  def response : String
  private def files = Map<String, Int>.new()
  private def src : String
  private def dest: String

  ---
  @param src : String   Source file or directory
  @param ?dest : String Destination file or directory (optional)
  ---
  def new(src: String, ?dest: String)
    this.src = src
    this.dest = dest
  end

  ---
  Transpile a file or a whole directory

  @param raxeOnly : Bool Must only copy to the dest directory, raxe files
  @return Bool transpilation has been done or not
  ---
  def transpile(all: Bool) : Bool
    def src = this.src
    def dest = this.dest
    def dir = src

    -- Transpile one file
    if(!FileSystem.isDirectory(this.src))
      def oldFileSize : Int = this.files.get(this.src)
      def currentSize : Int = FileSystem.stat(this.src).size

      if(oldFileSize == null || oldFileSize != currentSize)
        def result = transpileFile(dest, src)

        if(dest == null)
            this.response = result
        else
            FolderReader.createFile(dest, result)
        end

        this.files.set(this.src, currentSize)
        return true
      end

      return false
    -- Transpile a whole folder
    else
      def files = FolderReader.getFiles(src)
      def hasTranspile : Bool = false

      -- To have the same pattern between src and dest (avoid src/ and dist instead of dist/)
      if(src.endsWith("/"))
        src = src.substr(0, src.length - 1)
      end

      if(dest == null)
        dest = src
      elsif(dest.endsWith("/"))
        dest = dest.substr(0, dest.length - 1)
      end

      def currentFiles = Map<String, Int>.new()

      for(file in files.iterator())
        def oldFileSize : Int = this.files.get(file)
        def currentSize : Int = FileSystem.stat(file).size

        if(oldFileSize != currentSize && (all || isRaxeFile(file)))
          def newPath = this.getDestinationFile(file, src, dest)

          -- If it's a raxe file, we transpile it
          if(isRaxeFile(file))
            def result = transpileFile(dir, file)
            FolderReader.createFile(newPath, result)
            this.files.set(file, currentSize)

          -- If it's not a raxe file, we just copy/past it to the new folder
          else
              FolderReader.copyFileSystem(file, newPath)
          end

          this.files.set(file, currentSize)
          hasTranspile = true
        end

        currentFiles.set(file, currentSize)
      end

      for(key in this.files.keys())
        if(currentFiles.get(key) == null)
          this.files.remove(key)
          FileSystem.deleteFile(this.getDestinationFile(key, src, dest))
        end
      end

      return hasTranspile
    end

    return false
  end

  ---
  Transpile one file

  @param file : String Transpile a file and returns its content
  @return String content
  ---
  def transpileFile(dir : String, file: String): String
    def transpiler = Transpiler.new()
    dir = dir != null ? FileSystem.fullPath(dir) : Sys.getCwd()
    file = FileSystem.fullPath(file)

    Sys.println("Compiling " + file)
    return transpiler.transpile(dir, file)
  end

  ---
  Checks if the given file is a raxefile
  ---
  def isRaxeFile(filename: String): Bool
    return filename.endsWith(".rx")
  end

  ---
  Get the path the destination file

  @param file : String Path to the file
  @param src : String  Source directory
  @param dest : String Destination directory
  @return String destination file path
  ---
  def getDestinationFile(file: String, src: String, dest: String) : String
    def parts : Array<String> = file.split("/")
    def fileName : String = parts.pop()

    def newPath = parts.join("/") + "/" + fileName.replace(".rx", ".hx")

    if(dest != null)
      newPath = newPath.replace(src, dest)
    end

    return newPath
  end
end
