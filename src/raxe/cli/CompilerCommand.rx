import sys.FileSystem
import raxe.tools.Error
import raxe.tools.FolderReader
import raxe.compiler.Compiler

class @
  def response : String
  private def files = new Map[String, Int]()
  private def src : String
  private def dest : String
  private def all : Bool
  private def verbose : Bool

  #############################################################################
  # @param src     Source file or directory
  # @param dest    Destination file or directory
  # @param all     If true, include also non-raxe files
  # @param verbose If true, display verbose info
  #############################################################################
  def new(src: String, dest: String, all : Bool, verbose : Bool)
    @src = src
    @dest = dest
    @all = all
    @verbose = verbose
  end

  #############################################################################
  # Compile a file or a whole directory
  # @return transpilation has been done or not
  #############################################################################
  def compile() : Bool
    def src = @src
    def dest = @dest
    def dir = src

    # Compile one file
    if(!FileSystem.isDirectory(@src))
      def oldFileSize : Int = @files.get(@src)
      def currentSize : Int = FileSystem.stat(@src).size

      if(oldFileSize != currentSize)
        src = getSourceFile(src)
        printVerbose(src, dest)
        def result = compileFile(dest, src)

        if(dest == null || dest == "")
            @response = result
        else
            FolderReader.createFile(dest, result)
        end

        @files.set(@src, currentSize)
        return true
      end

      return false
    # Compile a whole folder
    else
      def files = FolderReader.getFiles(src)
      def hasCompile : Bool = false

      # To have the same pattern between src and dest (avoid src/ and dist instead of dist/)
      if(src.endsWith("/"))
        src = src.substr(0, src.length - 1)
      end

      if(dest == null || dest == "")
        dest = src
      elsif(dest.endsWith("/"))
        dest = dest.substr(0, dest.length - 1)
      end

      def currentFiles = new Map[String, Int]()

      for(file in files.iterator())
        def oldFileSize : Int = @files.get(file)
        def currentSize : Int = FileSystem.stat(file).size

        if(oldFileSize != currentSize && (all || isRaxeFile(file)))
          def newPath = @getDestinationFile(file, src, dest)

          # If it's a raxe file, we compile it
          if(isRaxeFile(file))
            file = getSourceFile(file)
            printVerbose(file, newPath)
            def result = compileFile(dir, file)
            FolderReader.createFile(newPath, result)
            @files.set(file, currentSize)

          # If it's not a raxe file, we just copy/past it to the new folder
          else
              FolderReader.copyFileSystem(file, newPath)
          end

          @files.set(file, currentSize)
          hasCompile = true
        end

        currentFiles.set(file, currentSize)
      end

      for(key in @files.keys())
        if(currentFiles.get(key) == null)
          @files.remove(key)
          FileSystem.deleteFile(@getDestinationFile(key, src, dest))
        end
      end

      return hasCompile
    end

    return false
  end

  #############################################################################
  # Print verbose info to console
  # @param src  Source file
  # @param dest Destination file
  #############################################################################
  private def printVerbose(src : String, dest : String)
    if(verbose)
      Sys.println("Compiling " + src + "\n" + "       to " + dest)
    end
  end

  #############################################################################
  # Compile one file
  # @param file Compile a file and returns its content
  # @return content
  #############################################################################
  private def compileFile(dir : String, file: String): String
    def compiler = new Compiler()
    dir = dir != null ? FileSystem.fullPath(dir) : Sys.getCwd()

    return compiler.compileFile(dir, file)
  end

  #############################################################################
  # Checks if the given file is a raxe file
  # @param filename Name of file to check for
  # @return if it is raxe file or not
  #############################################################################
  private def isRaxeFile(filename: String): Bool
    return filename.endsWith(".rx")
  end

  #############################################################################
  # Get the path to the source file
  # @param file Path to the file
  # @return source file path
  #############################################################################
  private def getSourceFile(file : String) : String
    FileSystem.fullPath(file)
  end

  #############################################################################
  # Get the path to the destination file
  # @param file Path to the file
  # @param src  Source directory
  # @param dest Destination directory
  # @return destination file path
  #############################################################################
  private def getDestinationFile(file: String, src: String, dest: String) : String
    def parts : Array[String] = file.split("/")
    def fileName : String = parts.pop()

    def newPath = parts.join("/") + "/" + fileName.replace(".rx", ".hx")

    if(dest != null)
      newPath = newPath.replace(src, dest)
    end

    return newPath
  end
end
