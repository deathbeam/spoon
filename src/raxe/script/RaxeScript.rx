import haxe.io.Input
import hscript.Parser
import hscript.Interp
import hscript.Expr
import sys.io.File
import sys.FileSystem
import raxe.transpiler.Transpiler
import raxe.tools.StringHandle

class self < Interp
  def parser : Parser = Parser.new()
  def transpiler : Transpiler = Transpiler.new()

  def new()
    super()

    variables.set("import", do(thing : String)
      def path = thing + ".rx"

      if(FileSystem.exists(path))
        return execute(parse(File.getContent(path)))
      end

      path = thing.replace("/", ".")

      def clazz : Dynamic = Type.resolveClass(path)

      if(clazz == null)
        clazz = Type.resolveEnum(path)

        if(clazz == null)
          trace("Failed to resolve type #{thing}")
        end
      end

      return clazz
    end)
  end

  def parse(s : String) : Expr
    def handle = StringHandle.new(s, transpiler.tokens)
    def content = transpiler.run(true, handle)
    return parser.parseString(content)
  end

  override def get(o : Dynamic, f : String ) : Dynamic
    if(o == null)
      #if debug
      trace("Null error when doing get #{f}")
      #end
      error(EInvalidAccess(f))
    end

    return Reflect.getProperty(o,f)
  end

  override def set( o : Dynamic, f : String, v : Dynamic ) : Dynamic
    if(o == null)
      #if debug
      trace("Null error when doing set #{f}")
      #end
      error(EInvalidAccess(f))
    end

    Reflect.setProperty(o,f,v)
    return v
  end
end
