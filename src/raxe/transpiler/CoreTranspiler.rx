-- vim: set ft=rb:

require "raxe/tools/StringHandle"

class self :: Transpiler

def new()
end

def script : Bool = false
def path : String = ""
def name : String = ""

def setIsScript(script : Bool) : CoreTranspiler
  this.script = script
  return this
end

def setPath(path : String) : CoreTranspiler
  this.path = path
  return this
end

def setName(name : String) : CoreTranspiler
  this.name = name
  return this
end

def tokens() : Array(:String:)
  return [
    -- Line break
    "\n",

    -- Inheritance & interfaces
    "<", "::",

    -- Generics
    "(:", ":)",

    -- Standard keywords
    "\"", "(", ")", "/", "=", "#", ",", "@", "]", "[", "{", "}",

    -- Raxe keywords
    "-", "require", "include", "def", "self", ".new", "new", "end", "do",

    -- Haxe keywords
    "typedef", "try", "catch",

    -- Expressions
    "elsif", "if", "else", "while", "for",

    -- Types
    "class", "enum", "abstract", "interface",

    -- Modifiers
    "public", "private",
  ]
end

def transpile(handle : StringHandle)
  def type = ""
  def isPrivate = false
  def count = -1

  if(!script)
    handle.insert("package " + path + ";using Lambda;using StringTools;").increment()
  end

  while (handle.nextToken())
    -- Process comments and ignore everything in
    -- them until end of line or until next match if multiline
    if(handle.is("-"))
      def comment = ""
      def position = handle.position

      while(handle.nextTokenLine())
        if(handle.is("-"))
          if (comment != "" && handle.content.charAt(handle.position - 1) != "-")
            handle.increment()
            break
          else
            comment += "-"
            handle.increment()
          end
        else
          handle.increment()
          break
        end
      end

      handle.position = position
      handle.current = "-"

      if(comment.length > 2)
        handle.remove(comment)
        handle.insert("/** ")
        handle.increment()
        handle.next(comment)
        handle.remove(comment)
        handle.insert(" **/")
        handle.increment()
      elsif(comment.length == 2)
        handle.remove(comment)
        handle.insert("//")
        handle.increment()
        handle.next("\n")
        handle.increment()
      else
        handle.increment()
      end
    -- Skip compiler defines
    elsif (handle.is("#") || handle.is("@"))
      handle.next("\n")
    -- Step over things in strings (" ") and process multiline strings
    elsif(handle.is("\""))
      consumeStrings(handle)
    -- Correct access
    elsif(handle.safeis("public") || handle.safeis("private"))
      isPrivate = true
      handle.increment()
    elsif(handle.is("{"))
      count = count + 1
      handle.increment()
    elsif(handle.is("}"))
      count = count - 1
      handle.increment()
    elsif(handle.is(".new"))
      handle.remove()
      handle.prevTokenLine()

      if(handle.is(")"))
        handle.prev("(")
        handle.prevTokenLine()
      end

      handle.increment()
      handle.insert("new ")
      handle.increment()
    elsif(handle.safeis("try"))
      handle.increment()
      handle.insert("{")
      handle.increment()
      count = count + 1
    elsif(handle.safeis("catch"))
      handle.insert("}")
      handle.increment()
      handle.increment("catch")
      handle.nextToken()
      consumeBrackets(handle, "(", ")")
      handle.insert("{")
      handle.increment()
    -- Change end to classic bracket end
    elsif(handle.safeis("end"))
      handle.remove()
      handle.insert("}")
      handle.increment()
      count = count - 1
    -- Change require to classic imports
    elsif(handle.safeis("require") || handle.safeis("include"))
      def isInclude = handle.is("include")
      def toUsing = ""

      if(script)
        handle.increment()
        continue
      end

      handle.remove()
      handle.insert("import")
      handle.increment()

      def firstQuote = true

      while(handle.nextToken())
        if(handle.is("\""))
          handle.remove()

          if(!firstQuote)
            if(isInclude)
              handle.insert(".*;using " + toUsing + ";")
              handle.increment()
            end

            handle.increment("\"")
            break
          end

          firstQuote = false
        elsif(handle.is("/"))
          if (isInclude)
            def position = handle.position
            handle.increment()
            safeNextToken(handle)

            if(handle.is("\""))
              toUsing = handle.content.substr(position + 1, handle.position - position - 1)
            end

            handle.position = position
          end

          handle.remove("/")
          handle.insert(".")
        end

        handle.increment()
      end
    -- Defines to variables and functions
    elsif(handle.safeis("def"))
      handle.remove("def")

      if(count == 0)
        if(!isPrivate)
          handle.insert("public ")
          handle.increment()
        end
      end

      isPrivate = false

      def position = handle.position
      safeNextToken(handle)

      if(handle.safeis("self"))
        handle.remove("self.")
        handle.position = position
        handle.insert("static ")
        handle.increment()
        position = handle.position
        safeNextToken(handle)
      end

      def implicit = true

      if(handle.safeis("new"))
        implicit = false
        handle.increment()
        handle.nextToken()
      end

      if(handle.is("(:"))
        handle.next(":)")
        handle.increment()
        handle.nextToken()
      end

      if(handle.is("("))
        handle.position = position
        handle.insert("function")
        consumeBrackets(handle, "(", ")")
        handle.next("\n")

        if(type == "class" || type == "module")
          if (implicit)
            handle.insert(" return{")
          else
            handle.insert("{")
          end

          count = count + 1
        end

        handle.increment()
      else
        handle.position = position
        handle.insert("var")
        handle.increment()
      end
    -- Closures and blocks
    elsif(handle.safeis("do"))
      var position = handle.position
      handle.increment()
      handle.nextToken()
      handle.position = position

      if(handle.is("("))
        handle.remove("do")
        handle.insert("function")
        handle.increment()
        consumeBrackets(handle, "(", ")")
        handle.insert(" return{")
      else
        handle.remove("do")
        handle.insert("{")
      end

      count = count + 1

      handle.increment()
    -- Insert begin bracket after if and while
    elsif(handle.safeis("if"))
      handle.increment()
      handle.nextToken()
      consumeBrackets(handle, "(", ")")
      handle.insert("{")
      handle.increment()
      count = count + 1
    -- Change elseif to else if and insert begin and end brackets around it
    elsif(handle.safeis("elsif"))
      handle.remove()
      handle.insert("}else if")
      handle.increment()
      handle.nextToken()
      consumeBrackets(handle, "(", ")")
      handle.insert("{")
      handle.increment()
    elsif(handle.safeis("while") || handle.safeis("for"))
      handle.increment()
      handle.nextToken()
      consumeBrackets(handle, "(", ")")
      handle.insert("{")
      count = count + 1
      handle.increment()
    -- Inser begin and end brackets around else but do not try to
    -- process curlys because there will not be any
    elsif(handle.safeis("else"))
      handle.insert("}")
      handle.increment()
      handle.increment("else")
      handle.insert("{")
      handle.increment()
    -- [abstract] class/interface/enum
    elsif (handle.safeis("class") || handle.safeis("interface") || handle.safeis("enum"))
      type = handle.current
      handle.increment()

      while(handle.nextToken())
        if(handle.is("self"))
          handle.remove()
          handle.insert(name)
        elsif(handle.is("<"))
          handle.remove()
          handle.insert("extends")
        elsif(handle.is("::"))
          handle.remove()
          handle.insert("implements")
        elsif(handle.is("\n"))
          handle.insert("{")
          break
        end

        handle.increment()
      end
    elsif(handle.safeis("self"))
      handle.remove()
      handle.insert(name)
      handle.increment()
    else
      handle.increment() -- Skip this token
    end
  end

  if(!script)
    handle.content = handle.content + "\n}"
  end

  return handle.content
end

private def safeNextToken(handle : StringHandle) : Bool
  handle.nextToken()

  if (safeCheck(handle, "def") && safeCheck(handle, "if") && safeCheck(handle, "elsif") && safeCheck(handle, "end")  &&
      safeCheck(handle, "self")  && safeCheck(handle, "while") && safeCheck(handle, "for") && safeCheck(handle, "require") &&
      safeCheck(handle, "do") && safeCheck(handle, "else") && safeCheck(handle, "try") && safeCheck(handle, "catch") &&
      safeCheck(handle, "include") && safeCheck(handle, "private") && safeCheck(handle, "public"))
    return true
  else
    handle.increment()
    return safeNextToken(handle)
  end
end

private def safeCheck(handle : StringHandle, content : String) : Bool
  if(handle.is(content))
    return handle.safeis(content)
  end

  return true
end

private def consumeBrackets(handle : StringHandle, startSymbol : String, endSymbol : String)
  def count = 0

  while(handle.nextToken())
    if(handle.is("\""))
      consumeStrings(handle)
    elsif(handle.is(startSymbol))
      count = count + 1
      handle.increment()
    elsif(handle.is(endSymbol))
      count = count - 1
      handle.increment()
    else
      handle.increment()
    end

    if (count == 0)
      break
    end
  end
end

private def consumeStrings(handle : StringHandle)
  if(handle.at("\"\"\""))
    handle.remove("\"\"\"")
    handle.insert("\"")
  end

  handle.increment()

  while(handle.nextToken())
    if(handle.is("#"))
      if(handle.content.charAt(handle.position + 1) == "{")
        handle.remove()
        handle.insert("$")
      end

      handle.increment()
    else
      if(handle.is("\"") &&
          (handle.content.charAt(handle.position -1) != "\\" ||
          (handle.content.charAt(handle.position -1) == "\\" &&
          handle.content.charAt(handle.position -2) == "\\")))
        break
      end

      handle.increment()
    end
  end

  if(handle.at("\"\"\""))
    handle.remove("\"\"\"")
    handle.insert("\"")
  end

  handle.increment()
end
